install.packages( "data.table", dependencies= TRUE )
install.packages( "data.table", dependencies= TRUE )
install.packages( "data.table", dependencies= TRUE )
install.packages("bit64")
install.packages("bit")
install.packages("bit64")
install.packages("nanotime")
install.packages( "data.table", dependencies= TRUE )
library(data.table)
library(Matrix)
library(Hmisc)
install.packages( "Hmisc", dependencies= TRUE )
install.packages( "survival", dependencies= TRUE )
install.packages("ggplot2", dependencies = TRUE)
install.packages("DBI")
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
install.packages("gganimate", dependencies = TRUE)
install.packages("transformr", dependencies = TRUE)
install.packages("farver", dependencies = TRUE)
install.packages("transformr", dependencies = TRUE)
install.packages("rpart", dependencies = TRUE)
install.packages("rpart.plot", dependencies = TRUE)
library(rpart.plot)
install.packages("treeClust", dependencies = TRUE)
install.packages("ranger", dependencies = TRUE)
install.packages("randomForest", dependencies = TRUE)
install.packages("xgboost", dependencies = TRUE)
library(xgboost)
library(lightgbm)
install.packages("lightgbm", dependencies = TRUE)
setwd("~/R/labo")
require("data.table")
require("rpart")
require("rpart.plot")
setwd("~/R/labo")  #Establezco el Working Directory
#cargo los datos de 202011 que es donde voy a ENTRENAR el modelo
dtrain  <- fread("./datasets/paquete_premium_202011.csv")
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  80,     #minima cantidad de registros para que se haga el split
minbucket=  1,     #tamaÃ±o minimo de una hoja
maxdepth=   4 )    #profundidad maxima del arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
dir.create( "./labo/exp/" )
dir.create( "./labo/exp/KA2001" )
fwrite( entrega,
file= "./labo/exp/KA2001/K101_001.csv",
sep= "," )
dir.create( "~/R/labo/exp/" )
dir.create( "~/R/labo/exp/KA2001" )
fwrite( entrega,
file= "~/R/labo/exp/KA2001/K101_001.csv",
sep= "," )
