install.packages( "data.table", dependencies= TRUE )
install.packages( "data.table", dependencies= TRUE )
install.packages( "data.table", dependencies= TRUE )
install.packages("bit64")
install.packages("bit")
install.packages("bit64")
install.packages("nanotime")
install.packages( "data.table", dependencies= TRUE )
library(data.table)
library(Matrix)
library(Hmisc)
install.packages( "Hmisc", dependencies= TRUE )
install.packages( "survival", dependencies= TRUE )
install.packages("ggplot2", dependencies = TRUE)
install.packages("DBI")
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
install.packages("gganimate", dependencies = TRUE)
install.packages("transformr", dependencies = TRUE)
install.packages("farver", dependencies = TRUE)
install.packages("transformr", dependencies = TRUE)
install.packages("rpart", dependencies = TRUE)
install.packages("rpart.plot", dependencies = TRUE)
library(rpart.plot)
install.packages("treeClust", dependencies = TRUE)
install.packages("ranger", dependencies = TRUE)
install.packages("randomForest", dependencies = TRUE)
install.packages("xgboost", dependencies = TRUE)
library(xgboost)
library(lightgbm)
install.packages("lightgbm", dependencies = TRUE)
setwd("~/R/labo")
require("data.table")
require("rpart")
require("rpart.plot")
setwd("~/R/labo")  #Establezco el Working Directory
#cargo los datos de 202011 que es donde voy a ENTRENAR el modelo
dtrain  <- fread("./datasets/paquete_premium_202011.csv")
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  80,     #minima cantidad de registros para que se haga el split
minbucket=  1,     #tamaño minimo de una hoja
maxdepth=   4 )    #profundidad maxima del arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
dir.create( "./labo/exp/" )
dir.create( "./labo/exp/KA2001" )
fwrite( entrega,
file= "./labo/exp/KA2001/K101_001.csv",
sep= "," )
dir.create( "~/R/labo/exp/" )
dir.create( "~/R/labo/exp/KA2001" )
fwrite( entrega,
file= "~/R/labo/exp/KA2001/K101_001.csv",
sep= "," )
install.packages("DiceKriging")
install.packages("mlrMBO")
library(mlrMBO)
install.packages("IRkernel")
require("data.table")
require("rpart")
require("rpart.plot")
#Aqui se debe poner la carpeta de SU computadora local
setwd("~/R/labo")  #Establezco el Working Directory
#cargo los datos de 202011 que es donde voy a ENTRENAR el modelo
dtrain  <- fread("./datasets/paquete_premium_202011.csv")
#genero el modelo,  aqui se construye el arbol
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  80,     #minima cantidad de registros para que se haga el split
minbucket=  1,     #tamaño minimo de una hoja
maxdepth=   4 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
install.packages("devtools")
library(devtools)
install.packages("gganimate")
install.packages("progress")
install.packages("gganimate")
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  80,     #minima cantidad de registros para que se haga el split
minbucket=  1,     #tamaño minimo de una hoja
maxdepth=   4 )    #profundidad maxima del arbol
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  60,     #minima cantidad de registros para que se haga el split
minbucket=  1,     #tamaño minimo de una hoja
maxdepth=   4 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
dir.create( "~/R/labo/exp/" )
dir.create( "~/R/labo/exp/KA2001" )
fwrite( entrega,
file= "~/R/labo/exp/KA2001/K101_001.csv",
sep= "," )
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  60,     #minima cantidad de registros para que se haga el split
# 80
minbucket=  2,     #tamaño minimo de una hoja
# 1
maxdepth=   4 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
# dir.create( "~/R/labo/exp/" )
# dir.create( "~/R/labo/exp/KA2001" )
fwrite( entrega,
file= "~/R/labo/exp/KA2001/K101_001.csv",
sep= "," )
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  60,     #minima cantidad de registros para que se haga el split
# 80
minbucket=  4,     #tamaño minimo de una hoja
# 2
# 1
maxdepth=   4 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
# dir.create( "~/R/labo/exp/" )
# dir.create( "~/R/labo/exp/KA2001" )
fwrite( entrega,
file= "~/R/labo/exp/KA2001/K101_001.csv",
sep= "," )
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  60,     #minima cantidad de registros para que se haga el split
# 80
minbucket=  8,     #tamaño minimo de una hoja
# 4, 2, 1
maxdepth=   4 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
# dir.create( "~/R/labo/exp/" )
# dir.create( "~/R/labo/exp/KA2001" )
fwrite( entrega,
file= "~/R/labo/exp/KA2001/K101_001.csv",
sep= "," )
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  60,     #minima cantidad de registros para que se haga el split
# 80
minbucket=  8,     #tamaño minimo de una hoja
# 4, 2, 1
maxdepth=   6 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
# dir.create( "~/R/labo/exp/" )
# dir.create( "~/R/labo/exp/KA2001" )
fwrite( entrega,
file= "~/R/labo/exp/KA2001/K101_001.csv",
sep= "," )
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  60,     #minima cantidad de registros para que se haga el split
# 80
minbucket=  10,     #tamaño minimo de una hoja
# 4, 2, 1
maxdepth=   8 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
# dir.create( "~/R/labo/exp/" )
# dir.create( "~/R/labo/exp/KA2001" )
fwrite( entrega,
file= "~/R/labo/exp/KA2001/K101_001.csv",
sep= "," )
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  60,     #minima cantidad de registros para que se haga el split
# 80
minbucket=  14,     #tamaño minimo de una hoja
# 4, 2, 1
maxdepth=   16 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
# dir.create( "~/R/labo/exp/" )
# dir.create( "~/R/labo/exp/KA2001" )
fwrite( entrega,
file= "~/R/labo/exp/KA2001/K101_001.csv",
sep= "," )
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  80,     #minima cantidad de registros para que se haga el split
# 80
minbucket=  12,     #tamaño minimo de una hoja
# 4, 2, 1
maxdepth=   10 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
# dir.create( "~/R/labo/exp/" )
# dir.create( "~/R/labo/exp/KA2001" )
fwrite( entrega,
file= "~/R/labo/exp/KA2001/K101_001.csv",
sep= "," )
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  80,     #minima cantidad de registros para que se haga el split
# 80
minbucket=  14,     #tamaño minimo de una hoja
# 12, 10, 4, 2, 1. Aumento
maxdepth=   11 )    #profundidad maxima del arbol
# aumento
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
# dir.create( "~/R/labo/exp/" )
# dir.create( "~/R/labo/exp/KA2001" )
fwrite( entrega,
file= "~/R/labo/exp/KA2001/K101_001.csv",
sep= "," )
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.3,   #esto significa no limitar la complejidad de los splits
minsplit=  80,     #minima cantidad de registros para que se haga el split.
minbucket=  16,     #tamaño minimo de una hoja. # 12, 10, 4, 2, 1. Aumento
maxdepth=   14 )    #profundidad maxima del arbol. # aumento
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
# dir.create( "~/R/labo/exp/" )
# dir.create( "~/R/labo/exp/KA2001" )
fwrite( entrega,
file= "~/R/labo/exp/KA2001/K101_001.csv",
sep= "," )
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
setwd("~/R/labo/")   #Establezco el Working Directory
dataset  <- fread("./datasets/paquete_premium_202011.csv")
#particiono estratificadamente el dataset
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed= 777781 )  #Cambiar por la primer semilla de cada uno !
param_basicos  <- list( "cp"=         0,  #complejidad minima
"minsplit"=  10,  #minima cantidad de registros en un nodo para hacer el split
"minbucket"=  2,  #minima cantidad de registros en una hoja
"maxdepth"=  10 ) #profundidad máxima del arbol
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",     #quiero predecir clase_ternaria a partir del resto
data= dataset[ fold==1],  #fold==1  es training,  el 70% de los datos
xval= 0,
control=  param_basicos )  #aqui van los parametros
#aplico el modelo a los datos de testing
prediccion  <- predict( modelo,   #el modelo que genere recien
dataset[ fold==2],  #fold==2  es testing, el 30% de los datos
type= "prob") #type= "prob"  es que devuelva la probabilidad
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego una columna que es la de las ganancias
dataset[  , ganancia :=  ifelse( clase_ternaria=="BAJA+2", 59000, -1000 ) ]
#para testing agrego la probabilidad
dataset[ fold==2 , prob_baja2 := prediccion[, "BAJA+2"] ]
#calculo la ganancia en testing  qu es fold==2
ganancia_test  <- dataset[ fold==2 & prob_baja2 >  1/60, sum(ganancia) ]
#escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada  <-  ganancia_test / 0.3
cat( ganancia_test_normalizada )
source("~/R/labo/src/rpart/211_traintest_estratificado.r")
source("~/R/labo/src/rpart/211_traintest_estratificado.r")
source("~/R/labo/src/rpart/211_traintest_estratificado.r")
source("~/R/labo/src/rpart/211_traintest_estratificado.r")
source("~/R/labo/src/rpart/211_traintest_estratificado.r")
source("~/R/labo/src/rpart/211_traintest_estratificado.r")
mean(9306667, 8500000, 11753333, 10703333, 7620000, 8300000)
source("~/R/labo/src/rpart/211_traintest_estratificado.r")
source("~/R/labo/src/rpart/211_traintest_estratificado.r")
source("~/R/labo/src/rpart/211_traintest_estratificado.r")
source("~/R/labo/src/rpart/211_traintest_estratificado.r")
source("~/R/labo/src/rpart/211_traintest_estratificado.r")
source("~/R/labo/src/rpart/211_traintest_estratificado.r")
source("~/R/labo/src/rpart/211_traintest_estratificado.r")
mean(9214000, 9384000, 8484000, 10286000, 7566000, 7802000)
9306667/9214000
9306667/9214000
(9306667-9214000)/9306667
setwd("~/R/labo")  #Establezco el Working Directory
source("~/R/labo/src/rpart/222_traintest_montecarlo.r", echo=TRUE)
source("~/R/labo/src/rpart/222_traintest_montecarlo.r", echo=TRUE)
param_basicos$minsplit
param_basicos  <- list( "cp"=         -0.5,  #complejidad minima
"minsplit"=  900,  #minima cantidad de registros en un nodo para hacer el split
"minbucket"=  440,  #minima cantidad de registros en una hoja
"maxdepth"=  5 ) #profundidad máxima del arbol
for (param_basicos$minsplit in c(1,2,3,4)) {
#la funcion mcmapply  llama a la funcion ArbolEstimarGanancia  tantas veces como valores tenga el vector  ksemillas
ganancias  <- mcmapply( ArbolEstimarGanancia,
ksemillas,   #paso el vector de semillas, que debe ser el primer parametro de la funcion ArbolEstimarGanancia
MoreArgs= list( param_basicos),  #aqui paso el segundo parametro
SIMPLIFY= FALSE,
mc.cores= 5 )  #se puede subir a 5 si posee Linux o Mac OS
#muestro la lista de las ganancias en testing para la particion realizada con cada semilla
ganancias
#paso la lista a vector
unlist(ganancias)
#finalmente calculo la media (promedio)  de las ganancias
mean( unlist(ganancias) )
}
source("~/R/labo/src/rpart/231_mejormodelo.r", echo=TRUE)
